{"ast":null,"code":"import _toConsumableArray from \"/home/mi/app/react/accouts/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/mi/app/react/accouts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/mi/app/react/accouts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/mi/app/react/accouts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/mi/app/react/accouts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/mi/app/react/accouts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/mi/app/react/accouts/src/components/records.jsx\";\nimport React, { Component } from 'react';\nimport { table } from \"antd\";\nimport Record from \"./record\";\nimport * as moment from \"moment\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nimport * as RecordsAPI from \"../utils/RecordsAPI\";\nimport RecordForm from \"./RecordForm\";\n\nvar RecordList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RecordList, _Component);\n\n  function RecordList(props) {\n    var _this;\n\n    _classCallCheck(this, RecordList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RecordList).call(this, props));\n\n    _this.getData = function () {\n      RecordsAPI.getAll().then(function (res) {\n        _this.setState({\n          records: res.data,\n          isloaded: true\n        });\n      }).catch(function (error) {\n        _this.setState({\n          isloaded: true\n        });\n      });\n    };\n\n    _this.add = function (record) {\n      var records = _this.state.records; //  records.unshift(record);\n      //  this.setState({\n      //     records\n      //  })\n      // this.getData();  不需要整个全部重新发请求刷新页面，只需要局部更新state的值即可\n\n      _this.setState({\n        records: _toConsumableArray(records).concat([record //将新添加的那条添加到下面，这样可以简单的合并对象到一个数组\n        ])\n      });\n    };\n\n    _this.update = function (key, value) {};\n\n    _this.state = {\n      records: [// {id:1,date:\"2018-11-2\",title:\"房租\",amount:1900},\n        // {id:2,date:\"2018-11-5\",title:\"工资收入\",amount:5000},\n        // {id:3,date:\"2018-11-11\",title:\"购物\",amount:700},\n        // {id:4,date:\"2018-11-16\",title:\"收入\",amount:800},\n      ],\n      isloaded: false,\n      error: null\n    };\n    return _this;\n  }\n\n  _createClass(RecordList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$state = this.state,\n          records = _this$state.records,\n          isloaded = _this$state.isloaded; // const url=`https://5bfe4524362b930013f651be.mockapi.io/api/v1/records`\n      //  fetch(url).then(res=>{\n      //    return res.json();\n      //  }).then(data=>{  //res.data=data\n      //    this.setState({\n      //      records:data\n      //    })\n      //  }).catch(err=>\n      //    console.log(err)\n      //   )\n\n      this.getData();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          error = _this$state2.error,\n          isloaded = _this$state2.isloaded,\n          records = _this$state2.records;\n      var recordsComponent;\n      {\n        if (error) {\n          recordsComponent = React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84\n            },\n            __self: this\n          }, error);\n        } else if (!isloaded) {\n          recordsComponent = React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 86\n            },\n            __self: this\n          }, \"Loading...\");\n        } else {\n          recordsComponent = React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 91\n            },\n            __self: this\n          }, React.createElement(\"table\", {\n            className: \"table table-bordered\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          }, React.createElement(\"thead\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }, React.createElement(\"tr\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          }, React.createElement(\"th\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95\n            },\n            __self: this\n          }, \"Date\"), React.createElement(\"th\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96\n            },\n            __self: this\n          }, \"Ttile\"), React.createElement(\"th\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 97\n            },\n            __self: this\n          }, \"Amount\"), React.createElement(\"th\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }, \"\\u64CD\\u4F5C\"))), React.createElement(\"tbody\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, this.state.records.map(function (item, index) {\n            item.date = moment(item.date).format(\"YYYY-MM-DD:HH:ss:mm\");\n            return React.createElement(Record, Object.assign({\n              key: item.id\n            }, item, {\n              update: _this2.update,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 105\n              },\n              __self: this\n            }));\n          }))));\n        }\n      }\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Records\"), React.createElement(RecordForm, Object.assign({}, this.state, {\n        addRecord: this.add,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      })), recordsComponent);\n    }\n  }]);\n\n  return RecordList;\n}(Component);\n\nexport default RecordList;","map":{"version":3,"sources":["/home/mi/app/react/accouts/src/components/records.jsx"],"names":["React","Component","table","Record","moment","axios","PropTypes","RecordsAPI","RecordForm","RecordList","props","getData","getAll","then","res","setState","records","data","isloaded","catch","error","add","record","state","update","key","value","recordsComponent","map","item","index","date","format","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { table } from \"antd\"\nimport Record from \"./record\"\nimport * as moment from \"moment\"\nimport axios from \"axios\"\nimport PropTypes from \"prop-types\"\nimport * as RecordsAPI from \"../utils/RecordsAPI\"\nimport RecordForm from \"./RecordForm\"\n\nclass RecordList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      records:\n        [\n          // {id:1,date:\"2018-11-2\",title:\"房租\",amount:1900},\n          // {id:2,date:\"2018-11-5\",title:\"工资收入\",amount:5000},\n          // {id:3,date:\"2018-11-11\",title:\"购物\",amount:700},\n          // {id:4,date:\"2018-11-16\",title:\"收入\",amount:800},\n        ],\n      isloaded: false,\n      error: null\n    }\n  }\n\n  componentDidMount() {\n    const { records, isloaded } = this.state;\n    // const url=`https://5bfe4524362b930013f651be.mockapi.io/api/v1/records`\n    //  fetch(url).then(res=>{\n    //    return res.json();\n\n    //  }).then(data=>{  //res.data=data\n    //    this.setState({\n    //      records:data\n    //    })\n    //  }).catch(err=>\n    //    console.log(err)\n    //   )\n   this.getData();\n\n  }  \n  getData=()=>{\n  \n    RecordsAPI.getAll().then(res => {\n      this.setState({\n        records: res.data,\n        isloaded: true\n      })\n\n    }).catch(error => {\n      this.setState({\n        isloaded: true,\n      })\n    })\n\n\n  }\n\n   add=(record)=>{\n     const {records}=this.state;\n    //  records.unshift(record);\n    //  this.setState({\n    //     records\n    //  })\n    // this.getData();  不需要整个全部重新发请求刷新页面，只需要局部更新state的值即可\n    this.setState({\n      records:[\n       ...records,\n          record       //将新添加的那条添加到下面，这样可以简单的合并对象到一个数组\n \n      ]\n    })\n  \n   }\n   update=(key,value)=>{\n      \n     \n   }\n  render() {\n    const { error, isloaded, records } = this.state;\n    let recordsComponent;\n    {\n      if (error) {\n        recordsComponent = <div>{error}</div>\n      } else if (!isloaded) {\n        recordsComponent = <div>Loading...</div>\n\n      }\n      else {\n        recordsComponent = (\n          <div >\n            <table className=\"table table-bordered\">\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Ttile</th>\n                  <th>Amount</th>\n                  <th>操作</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  this.state.records.map((item, index) => {\n                    item.date = moment(item.date).format(\"YYYY-MM-DD:HH:ss:mm\")\n                    return <Record key={item.id} {...item}  update={this.update}  />\n\n                  })\n                }\n              </tbody>\n            </table>\n          </div>\n        );\n      }\n    }\n\n    return (\n      <div>\n        <h2>Records</h2>\n        <RecordForm  {...this.state} addRecord={this.add}/>\n        {recordsComponent}\n      </div>\n\n    )\n\n\n  }\n}\n\nexport default RecordList;\n\n\n"]},"metadata":{},"sourceType":"module"}